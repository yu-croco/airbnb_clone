= render 'partials/navbar'
.col-md-6
  %div
    = text_field_tag :search, params[:search], placeholder: "宿泊する場所を入力してください。", class: "form-control",id:"pac-input"
.col-md-6
  #map.google-maps
    / google maps api
    %script
      // show selected area on map
      function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
      center: {lat:#{@latitude}, lng: #{@longitude}},
      zoom: 13
      });
      var input = (document.getElementById('pac-input'));

      var autocomplete = new google.maps.places.Autocomplete(input);
      autocomplete.bindTo('bounds', map);

      // show listings on map
      - if (@all_listings.present?)
        - @all_listings.each do |listing|
          markers = [];
          infowindows = [];
          var marker = new google.maps.Marker({
          position: new google.maps.LatLng(#{listing.latitude}, #{listing.longitude}),
          map: map
          });

          markers.push(marker);

          - if (listing.photos.present?)
            marker.addListener('click', function() {
            var content = "<div>" + '<a href="/listings/' + #{listing.id} +'">' + "<img src="+" #{listing.photos[0].image.url(:thumb)}" + " " + "style='width: 100%;height: 150px;'" +"alt='139'>" + "</a>" + '<br>' + "<h5>#{listing.listing_title}</h5>";

            var infowindow = new google.maps.InfoWindow({
            content: content,
            maxWidth: 280
            });

            infowindow.open(map, this);
            infowindows.push(infowindow);
            });

      var infowindow = new google.maps.InfoWindow();
      var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
      });

      autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);

      // delete all infowindow
      infowindows.forEach(function(infowindow) {
      infowindow.close();
      });
      infowindows = [];

      // delete all marker
      markers.forEach(function(marker) {
      marker.setVisible(false);
      });
      markers = [];

      var place = autocomplete.getPlace();
      if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
      map.setZoom(13);
      } else {
      map.setCenter(place.geometry.location);
      map.setZoom(13);
      }

      // get geolocation on search field
      var lat = place.geometry.location.lat();
      var lng = place.geometry.location.lng();
      var geolocation = [lat, lng];

      var location = place.formatted_address;

      // record history when autocomplete form is changed
      url = "/listing-search?utf8=✓&search=" + place.formatted_address;

      window.history.pushState(null, null, url);

      $.ajax({
      url: '/ajax-searches',
      // this data is data for sending to url
      data: { 'geolocation': geolocation, 'location': location}
      });
      });
      }
  %script{:async => "", :defer => "defer", :src => "https://maps.googleapis.com/maps/api/js?key=#{Rails.application.secrets.GOOGLE_MAPS_KEY}&signed_in=true&libraries=places&callback=initMap"}
